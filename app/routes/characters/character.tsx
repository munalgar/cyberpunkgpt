import { useState, useEffect } from "react";
import { Link, useLoaderData, redirect } from "react-router";
import type { Route } from "../+types/characters";

// Character data - in a real app this would come from an API or database
const characters = {
  "johnny-silverhand": {
    id: "johnny-silverhand",
    name: "Johnny Silverhand",
    description:
      "Rockerboy, war veteran, and terrorist with a vendetta against Arasaka Corporation.",
    image: "https://via.placeholder.com/150?text=Johnny",
    greeting:
      "So you wanna chat with me? Let's make it quick. Got a corpo to burn.",
  },
  "judy-alvarez": {
    id: "judy-alvarez",
    name: "Judy Alvarez",
    description:
      "Braindance technician and editor at Lizzie's Bar, expert in virtual reality tech.",
    image: "https://via.placeholder.com/150?text=Judy",
    greeting:
      "Hey there! You wanna talk about braindance tech? I've got some cool new mods I've been working on.",
  },
  "panam-palmer": {
    id: "panam-palmer",
    name: "Panam Palmer",
    description:
      "Nomad and former member of the Aldecaldos clan, expert driver and mechanic.",
    image: "https://via.placeholder.com/150?text=Panam",
    greeting:
      "You've found me. What's on your mind? If you need something fixed or someone tracked down, I might be able to help.",
  },
  v: {
    id: "v",
    name: "V",
    description: "Mercenary, netrunner, and protagonist of Cyberpunk 2077.",
    image: "https://via.placeholder.com/150?text=V",
    greeting:
      "Hey, choom. What's the biz? I've got gigs to run, but I can spare a few minutes.",
  },
};

type CharacterType = (typeof characters)[keyof typeof characters];

type LoaderData = {
  character: CharacterType;
};

export async function loader({ params }: Route.LoaderArgs) {
  const characterId = params.characterId;

  if (!characterId || !characters[characterId as keyof typeof characters]) {
    return redirect("/characters");
  }

  return { character: characters[characterId as keyof typeof characters] };
}

export function meta({ data }: Route.MetaArgs<LoaderData>) {
  if (!data?.character) {
    return [{ title: "Character Not Found" }];
  }

  return [
    { title: `CyberChat - Chat with ${data.character.name}` },
    {
      name: "description",
      content: `Have a conversation with ${data.character.name} from Cyberpunk 2077`,
    },
  ];
}

type Message = {
  role: "user" | "assistant";
  content: string;
};

type UserProfile = {
  name: string | null;
  story: string | null;
};

export default function CharacterChat() {
  const { character } = useLoaderData() as LoaderData;
  const [messages, setMessages] = useState<Message[]>([
    { role: "assistant", content: character.greeting },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [userProfile, setUserProfile] = useState<UserProfile>({
    name: null,
    story: null,
  });

  useEffect(() => {
    // Load user profile from sessionStorage
    const userName = sessionStorage.getItem("userName");
    const userStory = sessionStorage.getItem("userStory");

    setUserProfile({
      name: userName,
      story: userStory,
    });

    // If user has a name, add personalized greeting
    if (userName && messages.length === 1) {
      setTimeout(() => {
        const personalizedGreeting = `Hey ${userName}! ${character.greeting}`;
        setMessages([{ role: "assistant", content: personalizedGreeting }]);
      }, 500);
    }
  }, [character.greeting]);

  // In a real app, this would call the Gemini API
  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!inputMessage.trim() || isLoading) return;

    // Add user message
    setMessages((prev) => [...prev, { role: "user", content: inputMessage }]);
    setIsLoading(true);

    // Clear input
    setInputMessage("");

    // Simulate API call delay
    setTimeout(() => {
      // In a real app, this would be the response from Gemini API
      // and would include the user's profile information
      let mockResponse = `This is a simulated response from ${character.name}.`;

      // Add personalization if user profile exists
      if (userProfile.name) {
        mockResponse += ` I'm talking to ${userProfile.name}.`;
      }

      if (userProfile.story) {
        mockResponse += ` Based on your background in Night City, I'd say...`;
      }

      mockResponse += ` In the actual app, this would be generated by the Gemini API based on the character's personality, the conversation context, and your profile information.`;

      setMessages((prev) => [
        ...prev,
        { role: "assistant", content: mockResponse },
      ]);
      setIsLoading(false);
    }, 1500);
  };

  return (
    <div className="min-h-screen bg-black text-white flex flex-col">
      <header className="bg-gray-900 border-b border-gray-800 p-4">
        <div className="max-w-5xl mx-auto flex justify-between items-center">
          <div className="flex items-center gap-4">
            <img
              src={character.image}
              alt={character.name}
              className="w-12 h-12 rounded-full object-cover border-2 border-cyan-600"
            />
            <div>
              <h1 className="text-xl font-bold text-cyan-500">
                {character.name}
              </h1>
              <p className="text-sm text-gray-400">{character.description}</p>
            </div>
          </div>
          <Link
            to="/characters"
            className="text-gray-400 hover:text-cyan-500 transition-colors"
          >
            Back to Characters
          </Link>
        </div>
      </header>

      <div className="flex-1 overflow-hidden flex flex-col max-w-5xl mx-auto w-full">
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${
                message.role === "user" ? "justify-end" : "justify-start"
              }`}
            >
              <div
                className={`max-w-[80%] rounded-lg p-3 ${
                  message.role === "user"
                    ? "bg-cyan-900 text-white"
                    : "bg-gray-800 text-gray-200"
                }`}
              >
                <p>{message.content}</p>
              </div>
            </div>
          ))}
          {isLoading && (
            <div className="flex justify-start">
              <div className="bg-gray-800 rounded-lg p-3 max-w-[80%]">
                <div className="flex gap-2">
                  <div className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"></div>
                  <div
                    className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"
                    style={{ animationDelay: "0.2s" }}
                  ></div>
                  <div
                    className="w-2 h-2 bg-gray-500 rounded-full animate-bounce"
                    style={{ animationDelay: "0.4s" }}
                  ></div>
                </div>
              </div>
            </div>
          )}
        </div>

        <form
          onSubmit={handleSendMessage}
          className="border-t border-gray-800 p-4"
        >
          <div className="flex gap-2">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              placeholder={`Message ${character.name}...`}
              className="flex-1 bg-gray-800 text-white border border-gray-700 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-cyan-600"
            />
            <button
              type="submit"
              disabled={isLoading || !inputMessage.trim()}
              className="bg-cyan-600 hover:bg-cyan-700 text-white px-4 py-2 rounded-md font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Send
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
